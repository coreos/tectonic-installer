apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: kube-controller-manager
  namespace: kube-system
  labels:
    tier: control-plane
    k8s-app: kube-controller-manager
spec:
  replicas: ${master_count}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
  template:
    metadata:
      labels:
        tier: control-plane
        k8s-app: kube-controller-manager
        pod-anti-affinity: kube-controller-manager-${tectonic_version}
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                pod-anti-affinity: kube-controller-manager-${tectonic_version}
            namespaces:
              - kube-system
            topologyKey: kubernetes.io/hostname
      containers:
      - name: kube-controller-manager
        image: ${hyperkube_image}
        command:
        - ./hyperkube
        - controller-manager
        - --allocate-node-cidrs=true
        - --configure-cloud-routes=false
        - --cluster-cidr=${cluster_cidr}
        - --root-ca-file=/etc/kubernetes/secrets/ca.crt
        - --service-account-private-key-file=/etc/kubernetes/secrets/service-account.key
        - --leader-elect=true
        - --node-monitor-grace-period=${node_monitor_grace_period}
        - --pod-eviction-timeout=${pod_eviction_timeout}
        - --cloud-provider=${cloud_provider}
        ${cloud_provider_config_flag}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10252  # Note: Using default port. Update if --port option is set differently.
          initialDelaySeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - name: secrets
          mountPath: /etc/kubernetes/secrets
          readOnly: true
        - mountPath: /etc/kubernetes/cloud
          name: cloud-config
          readOnly: true
        - name: ssl-host
          mountPath: /etc/ssl/certs
          readOnly: true
      nodeSelector:
        node-role.kubernetes.io/master: ""
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      volumes:
      - name: secrets
        secret:
          secretName: kube-controller-manager
      - name: cloud-config
        secret:
          secretName: kube-cloud-cfg
      - name: ssl-host
        hostPath:
          path: /usr/share/ca-certificates
      dnsPolicy: Default # Don't use cluster DNS.
