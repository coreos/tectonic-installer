
// The base DNS domain of the cluster. It must NOT contain a trailing period. Some
// DNS providers will automatically add this if necessary.
// 
// Example: `openstack.dev.coreos.systems`.
// 
// Note: This field MUST be set manually prior to creating the cluster.
// This applies only to cloud platforms.
// 
// [Azure-specific NOTE]
// To use Azure-provided DNS, `tectonic_base_domain` should be set to `""`
// If using DNS records, ensure that `tectonic_base_domain` is set to a properly configured external DNS zone.
// Instructions for configuring delegated domains for Azure DNS can be found here: https://docs.microsoft.com/en-us/azure/dns/dns-delegate-domain-azure-dns
tectonic_base_domain = ""

// (optional) The content of the PEM-encoded CA certificate, used to generate Tectonic Console's server certificate.
// If left blank, a CA certificate will be automatically generated.
// tectonic_ca_cert = ""

// (optional) The content of the PEM-encoded CA key, used to generate Tectonic Console's server certificate.
// This field is mandatory if `tectonic_ca_cert` is set.
// tectonic_ca_key = ""

// (optional) The algorithm used to generate tectonic_ca_key.
// The default value is currently recommended.
// This field is mandatory if `tectonic_ca_cert` is set.
// tectonic_ca_key_alg = "RSA"

// (optional) This declares the IP range to assign Kubernetes pod IPs in CIDR notation.
// tectonic_cluster_cidr = "10.2.0.0/16"

// The name of the cluster.
// If used in a cloud-environment, this will be prepended to `tectonic_base_domain` resulting in the URL to the Tectonic console.
// 
// Note: This field MUST be set manually prior to creating the cluster.
// Warning: Special characters in the name like '.' may cause errors on OpenStack platforms due to resource name constraints.
tectonic_cluster_name = ""

// (optional) The Container Linux update channel.
// 
// Examples: `stable`, `beta`, `alpha`
// tectonic_container_linux_channel = "stable"

// The Container Linux version to use. Set to `latest` to select the latest available version for the selected update channel.
// 
// Examples: `latest`, `1465.6.0`
tectonic_container_linux_version = "latest"

// (optional) A list of PEM encoded CA files that will be installed in /etc/ssl/certs on etcd, master, and worker nodes.
// tectonic_custom_ca_pem_list = ""

// (optional) This only applies if you use the modules/dns/ddns module.
// 
// Specifies the RFC2136 Dynamic DNS server key algorithm.
// tectonic_ddns_key_algorithm = ""

// (optional) This only applies if you use the modules/dns/ddns module.
// 
// Specifies the RFC2136 Dynamic DNS server key name.
// tectonic_ddns_key_name = ""

// (optional) This only applies if you use the modules/dns/ddns module.
// 
// Specifies the RFC2136 Dynamic DNS server key secret.
// tectonic_ddns_key_secret = ""

// (optional) This only applies if you use the modules/dns/ddns module.
// 
// Specifies the RFC2136 Dynamic DNS server IP/host to register IP addresses to.
// tectonic_ddns_server = ""

// (optional) The size in MB of the PersistentVolume used for handling etcd backups.
// tectonic_etcd_backup_size = "512"

// (optional) The name of an existing Kubernetes StorageClass that will be used for handling etcd backups.
// tectonic_etcd_backup_storage_class = ""

// (optional) The path of the file containing the CA certificate for TLS communication with etcd.
// 
// Note: This works only when used in conjunction with an external etcd cluster.
// If set, the variable `tectonic_etcd_servers` must also be set.
// tectonic_etcd_ca_cert_path = "/dev/null"

// (optional) The path of the file containing the client certificate for TLS communication with etcd.
// 
// Note: This works only when used in conjunction with an external etcd cluster.
// If set, the variables `tectonic_etcd_servers`, `tectonic_etcd_ca_cert_path`, and `tectonic_etcd_client_key_path` must also be set.
// tectonic_etcd_client_cert_path = "/dev/null"

// (optional) The path of the file containing the client key for TLS communication with etcd.
// 
// Note: This works only when used in conjunction with an external etcd cluster.
// If set, the variables `tectonic_etcd_servers`, `tectonic_etcd_ca_cert_path`, and `tectonic_etcd_client_cert_path` must also be set.
// tectonic_etcd_client_key_path = "/dev/null"

// The number of etcd nodes to be created.
// If set to zero, the count of etcd nodes will be determined automatically.
// 
// Note: This is not supported on bare metal.
tectonic_etcd_count = "0"

// (optional) List of external etcd v3 servers to connect with (hostnames/IPs only).
// Needs to be set if using an external etcd cluster.
// Note: If this variable is defined, the installer will not create self-signed certs.
// To provide a CA certificate to trust the etcd servers, set "tectonic_etcd_ca_cert_path".
// 
// Example: `["etcd1", "etcd2", "etcd3"]`
// tectonic_etcd_servers = ""

// (optional) If set to `true`, all etcd endpoints will be configured to use the "https" scheme.
// 
// Note: If `tectonic_experimental` is set to `true` this variable has no effect, because the experimental self-hosted etcd always uses TLS.
// tectonic_etcd_tls_enabled = true

// The path to the tectonic licence file.
// You can download the Tectonic license file from your Account overview page at [1].
// 
// [1] https://account.coreos.com/overview
// 
// Note: This field MUST be set manually prior to creating the cluster unless `tectonic_vanilla_k8s` is set to `true`.
tectonic_license_path = ""

// The number of master nodes to be created.
// This applies only to cloud platforms.
tectonic_master_count = "1"

// (optional) Configures the network to be used in Tectonic. One of the following values can be used:
// 
// - "flannel": enables overlay networking only. This is implemented by flannel using VXLAN.
// 
// - "canal": [ALPHA] enables overlay networking including network policy. Overlay is implemented by flannel using VXLAN. Network policy is implemented by Calico.
// 
// - "calico": [ALPHA] enables BGP based networking. Routing and network policy is implemented by Calico. Note this has been tested on baremetal installations only.
// tectonic_networking = "flannel"

// The path the pull secret file in JSON format.
// This is known to be a "Docker pull secret" as produced by the docker login [1] command.
// A sample JSON content is shown in [2].
// You can download the pull secret from your Account overview page at [3].
// 
// [1] https://docs.docker.com/engine/reference/commandline/login/
// 
// [2] https://coreos.com/os/docs/latest/registry-authentication.html#manual-registry-auth-setup
// 
// [3] https://account.coreos.com/overview
// 
// Note: This field MUST be set manually prior to creating the cluster unless `tectonic_vanilla_k8s` is set to `true`.
tectonic_pull_secret_path = ""

// (optional) This declares the IP range to assign Kubernetes service cluster IPs in CIDR notation.
// The maximum size of this IP range is /12
// tectonic_service_cidr = "10.3.0.0/16"

// Validity period of the self-signed certificates (in hours).
// Default is 3 years.
// This setting is ignored if user provided certificates are used.
tectonic_tls_validity_period = "26280"

// If set to true, a vanilla Kubernetes cluster will be deployed, omitting any Tectonic assets.
tectonic_vanilla_k8s = false

// The domain name which resolves to controller node(s)
tectonic_vmware_controller_domain = ""

// Terraform map of etcd node(s) vSphere Clusters, Example:
//   tectonic_vmware_etcd_clusters = {
//   "0" = "myvmwarecluster-0"
//   "1" = "myvmwarecluster-1"
//   "2" = "myvmwarecluster-2"
// }
tectonic_vmware_etcd_clusters = ""

// terraform map of etcd node(s) Virtual DataCenters, example:
//   tectonic_vmware_etcd_datacenters = {
//   "0" = "myvmwaredc-0"
//   "1" = "myvmwaredc-1"
//   "2" = "myvmwaredc-2"
// }
tectonic_vmware_etcd_datacenters = ""

// The storage LUN used by etcd nodes. In order to use vSphere Datastore Cluster use the syntax DatastoreClusterName/datastore.
tectonic_vmware_etcd_datastore = ""

// Terraform map of etcd node(s) network gateway IP, Example:
//   tectonic_vmware_etcd_gateways = {
//   "0" = "192.168.246.99"
//   "1" = "192.168.246.99"
//   "2" = "192.168.246.99"
// }
tectonic_vmware_etcd_gateways = ""

// Terraform map of etcd node(s) Hostnames, Example:
//   tectonic_vmware_etcd_hostnames = {
//   "0" = "mycluster-etcd-0"
//   "1" = "mycluster-etcd-1"
//   "2" = "mycluster-etcd-2"
// }
tectonic_vmware_etcd_hostnames = ""

// Terraform map of etcd node(s) IP Addresses, Example:
//   tectonic_vmware_etcd_ip = {
//   "0" = "192.168.246.10/24"
//   "1" = "192.168.246.11/24"
//   "2" = "192.168.246.12/24"
// }
tectonic_vmware_etcd_ip = ""

// etcd node(s) VM Memory Size in MB
tectonic_vmware_etcd_memory = "4096"

// Terraform map of etcd node(s) vSphere network portgroups, Example:
//   tectonic_vmware_etcd_networks = {
//   "0" = "mynet-0"
//   "1" = "mynet-1"
//   "2" = "mynet-2"
// }
tectonic_vmware_etcd_networks = ""

// Terraform map of etcd node(s) vSphere Resource Pools, Example:
//   tectonic_vmware_etcd_resource_pool = {
//   "0" = "myresourcepool-0"
//   "1" = "myresourcepool-1"
//   "2" = "myresourcepool-2"
// }
tectonic_vmware_etcd_resource_pool = ""

// etcd node(s) VM vCPU count
tectonic_vmware_etcd_vcpu = "1"

// vSphere Folder to create and add the Tectonic nodes
tectonic_vmware_folder = ""

// The domain name which resolves to Tectonic Ingress (i.e. worker node(s))
tectonic_vmware_ingress_domain = ""

// Terraform map of master node(s) vSphere Clusters, Example:
//   tectonic_vmware_master_clusters = {
//   "0" = "myvmwarecluster-0"
//   "1" = "myvmwarecluster-1"
// }
tectonic_vmware_master_clusters = ""

// terraform map of master node(s) Virtual DataCenters, example:
//   tectonic_vmware_master_datacenters = {
//   "0" = "myvmwaredc-0"
//   "1" = "myvmwaredc-1"
//   "2" = "myvmwaredc-2"
// }
tectonic_vmware_master_datacenters = ""

// The storage LUN used by master nodes. In order to use vSphere Datastore Cluster use the syntax DatastoreClusterName/datastore.
tectonic_vmware_master_datastore = ""

// Terraform map of master node(s) network gateway IP, Example:
//   tectonic_vmware_master_gateways = {
//   "0" = "192.168.246.99"
//   "1" = "192.168.246.99"
// }
tectonic_vmware_master_gateways = ""

// Terraform map of Master node(s) Hostnames, Example:
//   tectonic_vmware_master_hostnames = {
//   "0" = "mycluster-master-0"
//   "1" = "mycluster-master-1"
// }
tectonic_vmware_master_hostnames = ""

// Terraform map of Master node(s) IP Addresses, Example:
//   tectonic_vmware_master_ip = {
//   "0" = "192.168.246.20/24"
//   "1" = "192.168.246.21/24"
// }
tectonic_vmware_master_ip = ""

// Master node(s) Memory Size in MB
tectonic_vmware_master_memory = "4096"

// Terraform map of master node(s) vSphere network portgroups, Example:
//   tectonic_vmware_master_networks = {
//   "0" = "mynet-0"
//   "1" = "mynet-1"
// }
tectonic_vmware_master_networks = ""

// Terraform map of master node(s) vSphere Resource pools, Example:
//   tectonic_vmware_master_resource_pool = {
//   "0" = "myresourcepool-0"
//   "1" = "myresourcepool-1"
// }
tectonic_vmware_master_resource_pool = ""

// Master node(s) vCPU count
tectonic_vmware_master_vcpu = "1"

// DNS Server to be used by Virtual Machine(s). Multiple DNS servers can be separated by whitespace. Example: `"192.168.1.1 192.168.2.1"`
tectonic_vmware_node_dns = ""

// vCenter Server IP/FQDN
tectonic_vmware_server = ""

// SSH public key to use as an authorized key. Example: `"ssh-rsa AAAB3N..."`
tectonic_vmware_ssh_authorized_key = ""

// SSH private key file in .pem format corresponding to tectonic_vmware_ssh_authorized_key. If not provided, SSH agent will be used.
tectonic_vmware_ssh_private_key_path = ""

// Is the vCenter certificate Self-Signed? Example: `tectonic_vmware_sslselfsigned = "true"`
tectonic_vmware_sslselfsigned = ""

// The type of folder to create. Allowed options: datacenter, host, vm, datastore, and network.
tectonic_vmware_type = "vm"

// Virtual Machine template of CoreOS Container Linux.
tectonic_vmware_vm_template = ""

// Folder for VM template of CoreOS Container Linux.
tectonic_vmware_vm_template_folder = ""

// Terraform map of worker node(s) vSphere Clusters, Example:
//   tectonic_vmware_worker_clusters = {
//   "0" = "myvmwarecluster-0"
//   "1" = "myvmwarecluster-1"
// }
tectonic_vmware_worker_clusters = ""

// terraform map of worker node(s) Virtual DataCenters, example:
//   tectonic_vmware_worker_datacenters = {
//   "0" = "myvmwaredc-0"
//   "1" = "myvmwaredc-1"
// }
tectonic_vmware_worker_datacenters = ""

// The storage LUN used by worker nodes. In order to use vSphere Datastore Cluster use the syntax DatastoreClusterName/datastore.
tectonic_vmware_worker_datastore = ""

// Terraform map of worker node(s) network gateway IP, Example:
//   tectonic_vmware_worker_gateways = {
//   "0" = "192.168.246.99"
//   "1" = "192.168.246.99"
// }
tectonic_vmware_worker_gateways = ""

// Terraform map of Worker node(s) Hostnames, Example:
//   tectonic_vmware_worker_hostnames = {
//   "0" = "mycluster-worker-0"
//   "1" = "mycluster-worker-1"
// }
tectonic_vmware_worker_hostnames = ""

// Terraform map of Worker node(s) IP Addresses, Example:
//   tectonic_vmware_worker_ip = {
//   "0" = "192.168.246.30/24"
//   "1" = "192.168.246.31/24"
// }
tectonic_vmware_worker_ip = ""

// Worker node(s) Memory Size in MB
tectonic_vmware_worker_memory = "4096"

// Terraform map of worker node(s) vSphere network portgroups, Example:
//   tectonic_vmware_worker_networks = {
//   "0" = "mynet-0"
//   "1" = "mynet-1"
// }
tectonic_vmware_worker_networks = ""

// Terraform map of worker node(s) vSphere Resource Pools, Example:
//   tectonic_vmware_worker_resource_pool = {
//   "0" = "myresourcepool-0"
//   "1" = "myresourcepool-1"
// }
tectonic_vmware_worker_resource_pool = ""

// Worker node(s) vCPU count
tectonic_vmware_worker_vcpu = "1"

// The number of worker nodes to be created.
// This applies only to cloud platforms.
tectonic_worker_count = "3"
