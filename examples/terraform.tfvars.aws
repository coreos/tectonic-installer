
// e-mail address used to login to Tectonic
tectonic_admin_email = ""

// bcrypt hash of admin password to use with Tectonic Console
tectonic_admin_password_hash = ""

// (optional) Extra AWS tags to be applied to created autoscaling group resources.
// This is a list of maps having the keys `key`, `value` and `propagate_at_launch`.
// Example: `[ { key = "foo", value = "bar", propagate_at_launch = true } ]`
// tectonic_autoscaling_group_extra_tags = ""

// Number of Availability Zones your EC2 instances will be deployed across.
// This should be less than or equal to the total number available in the region. 
// Be aware that some regions only have 2.
// If set worker and master subnet CIDRs are calculated automatically.
// Note that this must be unset if availability zones CIDRs are configured explicitely using `tectonic_aws_master_custom_subnets` and `tectonic_aws_worker_custom_subnets`.
tectonic_aws_az_count = ""

// Instance size for the etcd node(s). Example: `t2.medium`.
tectonic_aws_etcd_ec2_type = "t2.medium"

// The amount of provisioned IOPS for the root block device of etcd nodes.
tectonic_aws_etcd_root_volume_iops = "100"

// The size of the volume in gigabytes for the root block device of etcd nodes.
tectonic_aws_etcd_root_volume_size = "30"

// The type of volume for the root block device of etcd nodes.
tectonic_aws_etcd_root_volume_type = "gp2"

// (optional) List of subnet IDs within an existing VPC to deploy master nodes into.
// Required to use an existing VPC and the list must match the AZ count.
// Example: `["subnet-111111", "subnet-222222", "subnet-333333"]`
// tectonic_aws_external_master_subnet_ids = ""

// (optional) ID of an existing VPC to launch nodes into.
// If unset a new VPC is created.
// Example: `vpc-123456`
// tectonic_aws_external_vpc_id = ""

// If set to true, create public facing ingress resources (ELB, A-records).
// If set to false, a "private" cluster will be created with an internal ELB only.
tectonic_aws_external_vpc_public = true

// (optional) List of subnet IDs within an existing VPC to deploy worker nodes into.
// Required to use an existing VPC and the list must match the AZ count.
// Example: `["subnet-111111", "subnet-222222", "subnet-333333"]`
// tectonic_aws_external_worker_subnet_ids = ""

// (optional) Extra AWS tags to be applied to created resources.
// tectonic_aws_extra_tags = ""

// (optional) This configures master availability zones and their corresponding subnet CIDRs directly.
// Example: `{ eu-west-1a = "10.0.0.0/20", eu-west-1b = "10.0.16.0/20" }`
// Note that `tectonic_aws_az_count` must be unset if this is specified.
// tectonic_aws_master_custom_subnets = ""

// Instance size for the master node(s). Example: `t2.medium`.
tectonic_aws_master_ec2_type = "t2.medium"

// The amount of provisioned IOPS for the root block device of master nodes.
tectonic_aws_master_root_volume_iops = "100"

// The size of the volume in gigabytes for the root block device of master nodes.
tectonic_aws_master_root_volume_size = "30"

// The type of volume for the root block device of master nodes.
tectonic_aws_master_root_volume_type = "gp2"

// Name of an SSH key located within the AWS region. Example: coreos-user.
tectonic_aws_ssh_key = ""

// Block of IP addresses used by the VPC.
// This should not overlap with any other networks, such as a private datacenter connected via Direct Connect.
tectonic_aws_vpc_cidr_block = "10.0.0.0/16"

// Instance size for the worker node(s). Example: `t2.medium`.
tectonic_aws_worker_ec2_type = "t2.medium"

// The amount of provisioned IOPS for the root block device of worker nodes.
tectonic_aws_worker_root_volume_iops = "100"

// The size of the volume in gigabytes for the root block device of worker nodes.
tectonic_aws_worker_root_volume_size = "30"

// The type of volume for the root block device of worker nodes.
tectonic_aws_worker_root_volume_type = "gp2"

// The base DNS domain of the cluster. Example: `openstack.dev.coreos.systems`.
tectonic_base_domain = ""

// (optional) PEM-encoded CA certificate, used to generate Tectonic Console's server certificate. Optional, if left blank, a CA certificate will be automatically generated.
// tectonic_ca_cert = ""

// (optional) PEM-encoded CA key, used to generate Tectonic Console's server certificate. Optional if tectonic_ca_cert is left blank
// tectonic_ca_key = ""

// Algorithm used to generate tectonic_ca_key. Optional if tectonic_ca_cert is left blank.
tectonic_ca_key_alg = "RSA"

// The Container Linux update channel.
// Examples: `stable`, `beta`, `alpha`
tectonic_cl_channel = "stable"

// A CIDR notation IP range from which to assign pod IPs
tectonic_cluster_cidr = "10.2.0.0/16"

// The name of the cluster. This will be prepended to `tectonic_base_domain` resulting in the URL to the Tectonic console.
tectonic_cluster_name = ""

// (optional) DNS prefix used to construct the console and API server endpoints.
// tectonic_dns_name = ""

// (optional) The path to the etcd CA certificate for TLS communication with etcd.
// tectonic_etcd_ca_cert_path = ""

// (optional) The path to the etcd client certificate for TLS communication with etcd.
// tectonic_etcd_client_cert_path = ""

// (optional) The path to the etcd client key for TLS communication with etcd.
// tectonic_etcd_client_key_path = ""

// The number of etcd nodes to be created.
// If set to zero, the count of etcd nodes will be determined automatically (currently only supported on AWS).
tectonic_etcd_count = "0"

// (optional) List of external etcd v3 servers to connect with (hostnames/IPs only).
// Needs to be set if using an external etcd cluster.
// Example: `["etcd1", "etcd2", "etcd3"]`
// tectonic_etcd_servers = ""

// If set to true, experimental Tectonic assets are being deployed.
tectonic_experimental = false

// Service IP used to reach kube-apiserver inside the cluster
tectonic_kube_apiserver_service_ip = "10.3.0.1"

// Service IP used to reach kube-dns
tectonic_kube_dns_service_ip = "10.3.0.10"

// Service IP used to reach self-hosted etcd
tectonic_kube_etcd_service_ip = "10.3.0.15"

// The path to the tectonic licence file.
tectonic_license_path = ""

// The number of master nodes to be created.
tectonic_master_count = "1"

// The path the pull secret file in JSON format.
tectonic_pull_secret_path = ""

// A CIDR notation IP range from which to assign service cluster IPs
tectonic_service_cidr = "10.3.0.0/16"

// If set to true, a vanilla Kubernetes cluster will be deployed, omitting the tectonic assets.
tectonic_vanilla_k8s = false

// The number of worker nodes to be created.
tectonic_worker_count = "3"
