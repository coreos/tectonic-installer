CLUSTER ?= demo
PLATFORM ?= aws
TMPDIR ?= /tmp
TOP_DIR := $(patsubst %/,%,$(dir $(abspath $(lastword $(MAKEFILE_LIST)))))
BUILD_DIR = $(TOP_DIR)/build/$(CLUSTER)
INSTALLER_BIN = $(TOP_DIR)/installer/bin/$(shell uname | tr '[:upper:]' '[:lower:]')/installer
TF_DOCS := $(shell which terraform-docs 2> /dev/null)
TF_EXAMPLES := $(shell which terraform-examples 2> /dev/null)
TF_CMD = TERRAFORM_CONFIG=$(TOP_DIR)/.terraformrc terraform

all: apply

$(INSTALLER_BIN):
	make build -C $(TOP_DIR)/installer

installer-env: $(INSTALLER_BIN) terraformrc.example
	$(info Using build directory [${BUILD_DIR}])
	@sed "s|<PATH_TO_INSTALLER>|$(INSTALLER_BIN)|g" terraformrc.example > .terraformrc

init:
ifdef FROM_ASSETS
	$(eval CLUSTER = $(shell unzip -Z1 $(FROM_ASSETS) | grep -Eo '^[^/\\]+' | sort -u))
	$(eval BUILD_DIR = $(TOP_DIR)/build/$(CLUSTER))
	@unzip -d $(TOP_DIR)/build $(FROM_ASSETS)
	@echo 
	@echo Done!
	@echo Your assets for cluster $(CLUSTER) are imported.
	@echo Now just use the cluster name variable and you are good to go.
	@echo 
	@echo CLUSTER=$(CLUSTER) make plan / apply / destroy
	@echo 
	@echo Happy applying!
else
	mkdir -p $(BUILD_DIR)
	touch $(BUILD_DIR)/terraform.tfvars
endif

$(BUILD_DIR)/.terraform:
	cd $(BUILD_DIR) && $(TF_CMD) get $(TOP_DIR)/platforms/$(PLATFORM)

plan: installer-env $(BUILD_DIR)/.terraform
	cd $(BUILD_DIR) && $(TF_CMD) plan $(TOP_DIR)/platforms/$(PLATFORM)

apply: installer-env $(BUILD_DIR)/.terraform
	cd $(BUILD_DIR) && $(TF_CMD) apply $(TOP_DIR)/platforms/$(PLATFORM)

destroy: installer-env ${BUILD_DIR}/.terraform
	cd $(BUILD_DIR) && $(TF_CMD) destroy -force $(TOP_DIR)/platforms/$(PLATFORM)

terraform-check:
	@terraform-docs >/dev/null 2>&1 || @echo "terraform-docs is required (https://github.com/segmentio/terraform-docs)"

payload:
	@${TOP_DIR}/modules/update-payload/make-update-payload.sh > /dev/null

docs: \
	Documentation/variables/config.md \
	Documentation/variables/aws.md \
	Documentation/variables/azure.md \
	Documentation/variables/metal.md \
	Documentation/variables/openstack-nova.md \
	Documentation/variables/openstack-neutron.md

Documentation/variables/config.md: config.tf
ifndef TF_DOCS
	$(error "terraform-docs is required (https://github.com/segmentio/terraform-docs)")
endif
	@echo '<!-- DO NOT EDIT. THIS FILE IS GENERATED BY THE MAKEFILE. -->' > $@
	@echo '# Terraform variables' >> $@
	@echo 'This document gives an overview of the variables used in the different platforms of the Tectonic SDK.' >> $@
	terraform-docs --no-required markdown config.tf >> $@

Documentation/variables/%.md: platforms/**/*.tf
ifndef TF_DOCS
	$(error "terraform-docs is required (https://github.com/segmentio/terraform-docs)")
endif

	$(eval PLATFORM_DIR := $(subst -,/,$*))
	@echo $(PLATFORM_DIR)
	@echo '<!-- DO NOT EDIT. THIS FILE IS GENERATED BY THE MAKEFILE. -->' > $@
	@echo '# Terraform variables' >> $@
	@echo 'This document gives an overview of the variables used in the different platforms of the Tectonic SDK.' >> $@
	terraform-docs --no-required markdown platforms/$(PLATFORM_DIR)/variables.tf >> $@

.PHONY: examples
examples: \
	examples/terraform.tfvars.aws \
	examples/terraform.tfvars.azure \
	examples/terraform.tfvars.metal \
	examples/terraform.tfvars.openstack-nova \
	examples/terraform.tfvars.openstack-neutron

examples/terraform.tfvars.%:
ifndef TF_EXAMPLES
	$(error "terraform-examples is required (https://github.com/s-urbaniak/terraform-examples)")
endif

	$(eval PLATFORM_DIR := $(subst -,/,$*))
	@echo $(PLATFORM_DIR)
	terraform-examples config.tf platforms/$(PLATFORM_DIR)/variables.tf > $@

clean: destroy
	rm -rf $(BUILD_DIR)

# This target is used by the GitHub PR checker to validate canonical syntax on all files.
#
structure-check: 
	$(eval FMT_ERR := $(shell terraform fmt -list -write=false .))
	@if [ "$(FMT_ERR)" != "" ]; then echo "misformatted files (run 'terraform fmt .' to fix):" $(FMT_ERR); exit 1; fi

canonical-syntax:
	terraform fmt -list .

.PHONY: make clean terraform terraform-dev structure-check canonical-syntax
