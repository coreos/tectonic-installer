package(default_visibility = ["//visibility:public"])

filegroup(
    name = "files",
    srcs = glob(
        ["**/*"],
        exclude = ["node_modules/**/*"],
    ),
)

filegroup(
    name = "packagejson",
    srcs = ["package.json"],
)

# This genrule maintains a Bazel-managed node_modules that is completely
# independent from the on-host node_modules.
# TODO(squat): replace this with auto-managed dependencies, which 
# currently does not work because of: https://github.com/bazelbuild/rules_nodejs/issues/77.
genrule(
    name = "node_dependencies",
    message = "Installing JavaScript dependencies...",
    srcs = [":files"],
    outs = ["node_modules"],
    cmd = "PATH=$$(pwd)/$$(dirname $(location @nodejs//:node)):$$PATH"
          + " && cp -RL installer/frontend/* tmp"
          + " && $(location @yarn//:yarn) --cwd $$(pwd)/tmp install"
          + " && cp -R tmp/node_modules $@",
    tools = ["@yarn//:yarn", "@nodejs//:node"],
)

# To build the JavaScript hermetically we must use the Bazel-managed
# node_modules and copy, not-symlink, the frontend files, as symlinks
# will cause build issues when yarn tries to find modules relative to the
# source file.
# Copy the files to a tmp directory so that no files are left after the build.
genrule(
    name = "frontend",
    message = "Building JavaScript...",
    srcs = [":files", ":node_dependencies"],
    outs = ["app-bundle.js"],
    cmd = "PATH=$$(pwd)/$$(dirname $(location @nodejs//:node)):$$PATH"
          + " && cp -RL installer tmp"
          + " && cp -R $(GENDIR)/installer tmp"
          + " && OUT=$$(pwd)/$@ $(location @yarn//:yarn) --cwd $$(pwd)/tmp/installer/frontend run build",
    tools = ["@yarn//:yarn", "@nodejs//:node"],
)

genrule(
    name = "frontend_test_sh",
    outs = ["frontend_test.sh"],
    cmd = "printf '"
            + "#!/bin/bash -e\n"
            + "export PATH=$$(pwd)/$$(dirname $$3):$$PATH\n"
            + "cp -RL $$(dirname $$2)/.. $$TMPDIR/installer"
            + "&& $$1 --cwd $$TMPDIR/$$(dirname $$2)/.. run test"
          + "'> $@",
    testonly = 1,
)

sh_test(
    name = "unit",
    size = "small",
    srcs = [":frontend_test_sh"],
    args = ["$(location @yarn//:yarn)", "$(location :packagejson)", "$(location @nodejs//:node)"],
    data = ["@yarn//:yarn", ":node_dependencies", ":packagejson", ":files", "@nodejs//:node"],
)
