// Automatically generated by MockGen. DO NOT EDIT!
// Source: pkg/client/interface.go

package client

import (
	types "github.com/coreos-inc/operator-client/pkg/types"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	unversioned "k8s.io/client-go/pkg/api/unversioned"
	v1 "k8s.io/client-go/pkg/api/v1"
	v1beta1 "k8s.io/client-go/pkg/apis/extensions/v1beta1"
	runtime "k8s.io/client-go/pkg/runtime"
)

// Mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockInterfaceRecorder
}

// Recorder for MockInterface (not exported)
type _MockInterfaceRecorder struct {
	mock *MockInterface
}

func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &_MockInterfaceRecorder{mock}
	return mock
}

func (_m *MockInterface) EXPECT() *_MockInterfaceRecorder {
	return _m.recorder
}

func (_m *MockInterface) KubernetesInterface() kubernetes.Interface {
	ret := _m.ctrl.Call(_m, "KubernetesInterface")
	ret0, _ := ret[0].(kubernetes.Interface)
	return ret0
}

func (_mr *_MockInterfaceRecorder) KubernetesInterface() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KubernetesInterface")
}

func (_m *MockInterface) GetThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string) (*runtime.Unstructured, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(*runtime.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetThirdPartyResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResource", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockInterface) GetThirdPartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockInterface) CreateThirdPartyResource(item *runtime.Unstructured) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) CreateThirdPartyResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResource", arg0)
}

func (_m *MockInterface) CreateThirdPartyResourceRaw(apiGroup string, version string, namespace string, kind string, data []byte) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceRaw", apiGroup, version, namespace, kind, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) CreateThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockInterface) CreateThirdPartyResourceRawIfNotFound(apiGroup string, version string, namespace string, kind string, name string, data []byte) (bool, error) {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceRawIfNotFound", apiGroup, version, namespace, kind, name, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) CreateThirdPartyResourceRawIfNotFound(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceRawIfNotFound", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockInterface) UpdateThirdPartyResource(item *runtime.Unstructured) error {
	ret := _m.ctrl.Call(_m, "UpdateThirdPartyResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) UpdateThirdPartyResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateThirdPartyResource", arg0)
}

func (_m *MockInterface) UpdateThirdPartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string, data []byte) error {
	ret := _m.ctrl.Call(_m, "UpdateThirdPartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) UpdateThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockInterface) CreateOrUpdateThirdpartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string, data []byte) error {
	ret := _m.ctrl.Call(_m, "CreateOrUpdateThirdpartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) CreateOrUpdateThirdpartyResourceRaw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOrUpdateThirdpartyResourceRaw", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockInterface) DeleteThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string) error {
	ret := _m.ctrl.Call(_m, "DeleteThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) DeleteThirdPartyResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteThirdPartyResource", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockInterface) AtomicModifyThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string, f TPRModifier, data interface{}) error {
	ret := _m.ctrl.Call(_m, "AtomicModifyThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName, f, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) AtomicModifyThirdPartyResource(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AtomicModifyThirdPartyResource", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockInterface) SetFailureStatus(name string, failureStatus *types.FailureStatus) error {
	ret := _m.ctrl.Call(_m, "SetFailureStatus", name, failureStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) SetFailureStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFailureStatus", arg0, arg1)
}

func (_m *MockInterface) SetTaskStatuses(name string, ts []types.TaskStatus) error {
	ret := _m.ctrl.Call(_m, "SetTaskStatuses", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) SetTaskStatuses(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTaskStatuses", arg0, arg1)
}

func (_m *MockInterface) UpdateTaskStatus(name string, ts types.TaskStatus) error {
	ret := _m.ctrl.Call(_m, "UpdateTaskStatus", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) UpdateTaskStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTaskStatus", arg0, arg1)
}

func (_m *MockInterface) GetThirdPartyResourceKind(name string) (*v1beta1.ThirdPartyResource, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResourceKind", name)
	ret0, _ := ret[0].(*v1beta1.ThirdPartyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResourceKind", arg0)
}

func (_m *MockInterface) CreateThirdPartyResourceKind(tpr *v1beta1.ThirdPartyResource) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceKind", tpr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) CreateThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceKind", arg0)
}

func (_m *MockInterface) DeleteThirdPartyResourceKind(name string) error {
	ret := _m.ctrl.Call(_m, "DeleteThirdPartyResourceKind", name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) DeleteThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteThirdPartyResourceKind", arg0)
}

func (_m *MockInterface) EnsureThirdPartyResourceKind(tpr *v1beta1.ThirdPartyResource) error {
	ret := _m.ctrl.Call(_m, "EnsureThirdPartyResourceKind", tpr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) EnsureThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnsureThirdPartyResourceKind", arg0)
}

func (_m *MockInterface) AtomicUpdateAppVersion(name string, fn types.AppVersionModifier) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "AtomicUpdateAppVersion", name, fn)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) AtomicUpdateAppVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AtomicUpdateAppVersion", arg0, arg1)
}

func (_m *MockInterface) UpdateAppVersion(_param0 *types.AppVersion) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "UpdateAppVersion", _param0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateAppVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAppVersion", arg0)
}

func (_m *MockInterface) GetAppVersion(name string) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "GetAppVersion", name)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetAppVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAppVersion", arg0)
}

func (_m *MockInterface) GetMigrationStatus(name string) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "GetMigrationStatus", name)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMigrationStatus", arg0)
}

func (_m *MockInterface) CreateMigrationStatus(_param0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "CreateMigrationStatus", _param0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) CreateMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMigrationStatus", arg0)
}

func (_m *MockInterface) UpdateMigrationStatus(_param0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "UpdateMigrationStatus", _param0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMigrationStatus", arg0)
}

func (_m *MockInterface) CreateDaemonSet(_param0 *v1beta1.DaemonSet) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "CreateDaemonSet", _param0)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) CreateDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDaemonSet", arg0)
}

func (_m *MockInterface) GetDaemonSet(namespace string, name string) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "GetDaemonSet", namespace, name)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDaemonSet", arg0, arg1)
}

func (_m *MockInterface) UpdateDaemonSetObject(_param0 *v1beta1.DaemonSet) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "UpdateDaemonSetObject", _param0)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateDaemonSetObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDaemonSetObject", arg0)
}

func (_m *MockInterface) DaemonSetRollingUpdate(_param0 *v1beta1.DaemonSet, _param1 UpdateOpts) (bool, error) {
	ret := _m.ctrl.Call(_m, "DaemonSetRollingUpdate", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) DaemonSetRollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DaemonSetRollingUpdate", arg0, arg1)
}

func (_m *MockInterface) AvailablePodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "AvailablePodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) AvailablePodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AvailablePodsForDaemonSet", arg0)
}

func (_m *MockInterface) UnavailablePodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "UnavailablePodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UnavailablePodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnavailablePodsForDaemonSet", arg0)
}

func (_m *MockInterface) NumberOfDesiredPodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "NumberOfDesiredPodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) NumberOfDesiredPodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumberOfDesiredPodsForDaemonSet", arg0)
}

func (_m *MockInterface) DeletePod(namespace string, name string) error {
	ret := _m.ctrl.Call(_m, "DeletePod", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) DeletePod(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePod", arg0, arg1)
}

func (_m *MockInterface) ListPodsWithSelector(namespace string, selector *unversioned.LabelSelector) (*v1.PodList, error) {
	ret := _m.ctrl.Call(_m, "ListPodsWithSelector", namespace, selector)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) ListPodsWithSelector(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPodsWithSelector", arg0, arg1)
}

func (_m *MockInterface) GetDeployment(namespace string, name string) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployment", arg0, arg1)
}

func (_m *MockInterface) CreateDeployment(_param0 *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "CreateDeployment", _param0)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDeployment", arg0)
}

func (_m *MockInterface) UpdateDeployment(_param0 *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "UpdateDeployment", _param0)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDeployment", arg0)
}

func (_m *MockInterface) DeploymentRollingUpdate(_param0 *v1beta1.Deployment, _param1 UpdateOpts) (bool, error) {
	ret := _m.ctrl.Call(_m, "DeploymentRollingUpdate", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) DeploymentRollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeploymentRollingUpdate", arg0, arg1)
}

func (_m *MockInterface) GetService(namespace string, name string) (*v1.Service, error) {
	ret := _m.ctrl.Call(_m, "GetService", namespace, name)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetService", arg0, arg1)
}

func (_m *MockInterface) UpdateService(_param0 *v1.Service) (*v1.Service, error) {
	ret := _m.ctrl.Call(_m, "UpdateService", _param0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateService", arg0)
}

func (_m *MockInterface) GetNode(name string) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "GetNode", name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) GetNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNode", arg0)
}

func (_m *MockInterface) UpdateNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "UpdateNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateNode", arg0)
}

func (_m *MockInterface) DrainNode(_param0 *v1.Node) error {
	ret := _m.ctrl.Call(_m, "DrainNode", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockInterfaceRecorder) DrainNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DrainNode", arg0)
}

func (_m *MockInterface) UnCordonNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "UnCordonNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) UnCordonNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnCordonNode", arg0)
}

func (_m *MockInterface) CordonNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "CordonNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockInterfaceRecorder) CordonNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CordonNode", arg0)
}

// Mock of TPRClient interface
type MockTPRClient struct {
	ctrl     *gomock.Controller
	recorder *_MockTPRClientRecorder
}

// Recorder for MockTPRClient (not exported)
type _MockTPRClientRecorder struct {
	mock *MockTPRClient
}

func NewMockTPRClient(ctrl *gomock.Controller) *MockTPRClient {
	mock := &MockTPRClient{ctrl: ctrl}
	mock.recorder = &_MockTPRClientRecorder{mock}
	return mock
}

func (_m *MockTPRClient) EXPECT() *_MockTPRClientRecorder {
	return _m.recorder
}

func (_m *MockTPRClient) GetThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string) (*runtime.Unstructured, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(*runtime.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTPRClientRecorder) GetThirdPartyResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResource", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockTPRClient) GetThirdPartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTPRClientRecorder) GetThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockTPRClient) CreateThirdPartyResource(item *runtime.Unstructured) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) CreateThirdPartyResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResource", arg0)
}

func (_m *MockTPRClient) CreateThirdPartyResourceRaw(apiGroup string, version string, namespace string, kind string, data []byte) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceRaw", apiGroup, version, namespace, kind, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) CreateThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockTPRClient) CreateThirdPartyResourceRawIfNotFound(apiGroup string, version string, namespace string, kind string, name string, data []byte) (bool, error) {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceRawIfNotFound", apiGroup, version, namespace, kind, name, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTPRClientRecorder) CreateThirdPartyResourceRawIfNotFound(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceRawIfNotFound", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockTPRClient) UpdateThirdPartyResource(item *runtime.Unstructured) error {
	ret := _m.ctrl.Call(_m, "UpdateThirdPartyResource", item)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) UpdateThirdPartyResource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateThirdPartyResource", arg0)
}

func (_m *MockTPRClient) UpdateThirdPartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string, data []byte) error {
	ret := _m.ctrl.Call(_m, "UpdateThirdPartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) UpdateThirdPartyResourceRaw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateThirdPartyResourceRaw", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockTPRClient) CreateOrUpdateThirdpartyResourceRaw(apiGroup string, version string, namespace string, resourceKind string, resourceName string, data []byte) error {
	ret := _m.ctrl.Call(_m, "CreateOrUpdateThirdpartyResourceRaw", apiGroup, version, namespace, resourceKind, resourceName, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) CreateOrUpdateThirdpartyResourceRaw(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOrUpdateThirdpartyResourceRaw", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockTPRClient) DeleteThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string) error {
	ret := _m.ctrl.Call(_m, "DeleteThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) DeleteThirdPartyResource(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteThirdPartyResource", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockTPRClient) AtomicModifyThirdPartyResource(apiGroup string, version string, namespace string, resourceKind string, resourceName string, f TPRModifier, data interface{}) error {
	ret := _m.ctrl.Call(_m, "AtomicModifyThirdPartyResource", apiGroup, version, namespace, resourceKind, resourceName, f, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) AtomicModifyThirdPartyResource(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AtomicModifyThirdPartyResource", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

func (_m *MockTPRClient) SetFailureStatus(name string, failureStatus *types.FailureStatus) error {
	ret := _m.ctrl.Call(_m, "SetFailureStatus", name, failureStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) SetFailureStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFailureStatus", arg0, arg1)
}

func (_m *MockTPRClient) SetTaskStatuses(name string, ts []types.TaskStatus) error {
	ret := _m.ctrl.Call(_m, "SetTaskStatuses", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) SetTaskStatuses(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTaskStatuses", arg0, arg1)
}

func (_m *MockTPRClient) UpdateTaskStatus(name string, ts types.TaskStatus) error {
	ret := _m.ctrl.Call(_m, "UpdateTaskStatus", name, ts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRClientRecorder) UpdateTaskStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateTaskStatus", arg0, arg1)
}

// Mock of TPRKindClient interface
type MockTPRKindClient struct {
	ctrl     *gomock.Controller
	recorder *_MockTPRKindClientRecorder
}

// Recorder for MockTPRKindClient (not exported)
type _MockTPRKindClientRecorder struct {
	mock *MockTPRKindClient
}

func NewMockTPRKindClient(ctrl *gomock.Controller) *MockTPRKindClient {
	mock := &MockTPRKindClient{ctrl: ctrl}
	mock.recorder = &_MockTPRKindClientRecorder{mock}
	return mock
}

func (_m *MockTPRKindClient) EXPECT() *_MockTPRKindClientRecorder {
	return _m.recorder
}

func (_m *MockTPRKindClient) GetThirdPartyResourceKind(name string) (*v1beta1.ThirdPartyResource, error) {
	ret := _m.ctrl.Call(_m, "GetThirdPartyResourceKind", name)
	ret0, _ := ret[0].(*v1beta1.ThirdPartyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTPRKindClientRecorder) GetThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetThirdPartyResourceKind", arg0)
}

func (_m *MockTPRKindClient) CreateThirdPartyResourceKind(tpr *v1beta1.ThirdPartyResource) error {
	ret := _m.ctrl.Call(_m, "CreateThirdPartyResourceKind", tpr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRKindClientRecorder) CreateThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateThirdPartyResourceKind", arg0)
}

func (_m *MockTPRKindClient) DeleteThirdPartyResourceKind(name string) error {
	ret := _m.ctrl.Call(_m, "DeleteThirdPartyResourceKind", name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRKindClientRecorder) DeleteThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteThirdPartyResourceKind", arg0)
}

func (_m *MockTPRKindClient) EnsureThirdPartyResourceKind(tpr *v1beta1.ThirdPartyResource) error {
	ret := _m.ctrl.Call(_m, "EnsureThirdPartyResourceKind", tpr)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTPRKindClientRecorder) EnsureThirdPartyResourceKind(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnsureThirdPartyResourceKind", arg0)
}

// Mock of AppVersionClient interface
type MockAppVersionClient struct {
	ctrl     *gomock.Controller
	recorder *_MockAppVersionClientRecorder
}

// Recorder for MockAppVersionClient (not exported)
type _MockAppVersionClientRecorder struct {
	mock *MockAppVersionClient
}

func NewMockAppVersionClient(ctrl *gomock.Controller) *MockAppVersionClient {
	mock := &MockAppVersionClient{ctrl: ctrl}
	mock.recorder = &_MockAppVersionClientRecorder{mock}
	return mock
}

func (_m *MockAppVersionClient) EXPECT() *_MockAppVersionClientRecorder {
	return _m.recorder
}

func (_m *MockAppVersionClient) AtomicUpdateAppVersion(name string, fn types.AppVersionModifier) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "AtomicUpdateAppVersion", name, fn)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAppVersionClientRecorder) AtomicUpdateAppVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AtomicUpdateAppVersion", arg0, arg1)
}

func (_m *MockAppVersionClient) UpdateAppVersion(_param0 *types.AppVersion) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "UpdateAppVersion", _param0)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAppVersionClientRecorder) UpdateAppVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateAppVersion", arg0)
}

func (_m *MockAppVersionClient) GetAppVersion(name string) (*types.AppVersion, error) {
	ret := _m.ctrl.Call(_m, "GetAppVersion", name)
	ret0, _ := ret[0].(*types.AppVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAppVersionClientRecorder) GetAppVersion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAppVersion", arg0)
}

// Mock of MigrationStatusClient interface
type MockMigrationStatusClient struct {
	ctrl     *gomock.Controller
	recorder *_MockMigrationStatusClientRecorder
}

// Recorder for MockMigrationStatusClient (not exported)
type _MockMigrationStatusClientRecorder struct {
	mock *MockMigrationStatusClient
}

func NewMockMigrationStatusClient(ctrl *gomock.Controller) *MockMigrationStatusClient {
	mock := &MockMigrationStatusClient{ctrl: ctrl}
	mock.recorder = &_MockMigrationStatusClientRecorder{mock}
	return mock
}

func (_m *MockMigrationStatusClient) EXPECT() *_MockMigrationStatusClientRecorder {
	return _m.recorder
}

func (_m *MockMigrationStatusClient) GetMigrationStatus(name string) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "GetMigrationStatus", name)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMigrationStatusClientRecorder) GetMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMigrationStatus", arg0)
}

func (_m *MockMigrationStatusClient) CreateMigrationStatus(_param0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "CreateMigrationStatus", _param0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMigrationStatusClientRecorder) CreateMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateMigrationStatus", arg0)
}

func (_m *MockMigrationStatusClient) UpdateMigrationStatus(_param0 *types.MigrationStatus) (*types.MigrationStatus, error) {
	ret := _m.ctrl.Call(_m, "UpdateMigrationStatus", _param0)
	ret0, _ := ret[0].(*types.MigrationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMigrationStatusClientRecorder) UpdateMigrationStatus(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateMigrationStatus", arg0)
}

// Mock of DaemonSetClient interface
type MockDaemonSetClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDaemonSetClientRecorder
}

// Recorder for MockDaemonSetClient (not exported)
type _MockDaemonSetClientRecorder struct {
	mock *MockDaemonSetClient
}

func NewMockDaemonSetClient(ctrl *gomock.Controller) *MockDaemonSetClient {
	mock := &MockDaemonSetClient{ctrl: ctrl}
	mock.recorder = &_MockDaemonSetClientRecorder{mock}
	return mock
}

func (_m *MockDaemonSetClient) EXPECT() *_MockDaemonSetClientRecorder {
	return _m.recorder
}

func (_m *MockDaemonSetClient) CreateDaemonSet(_param0 *v1beta1.DaemonSet) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "CreateDaemonSet", _param0)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) CreateDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDaemonSet", arg0)
}

func (_m *MockDaemonSetClient) GetDaemonSet(namespace string, name string) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "GetDaemonSet", namespace, name)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) GetDaemonSet(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDaemonSet", arg0, arg1)
}

func (_m *MockDaemonSetClient) UpdateDaemonSetObject(_param0 *v1beta1.DaemonSet) (*v1beta1.DaemonSet, error) {
	ret := _m.ctrl.Call(_m, "UpdateDaemonSetObject", _param0)
	ret0, _ := ret[0].(*v1beta1.DaemonSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) UpdateDaemonSetObject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDaemonSetObject", arg0)
}

func (_m *MockDaemonSetClient) DaemonSetRollingUpdate(_param0 *v1beta1.DaemonSet, _param1 UpdateOpts) (bool, error) {
	ret := _m.ctrl.Call(_m, "DaemonSetRollingUpdate", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) DaemonSetRollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DaemonSetRollingUpdate", arg0, arg1)
}

func (_m *MockDaemonSetClient) AvailablePodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "AvailablePodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) AvailablePodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AvailablePodsForDaemonSet", arg0)
}

func (_m *MockDaemonSetClient) UnavailablePodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "UnavailablePodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) UnavailablePodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnavailablePodsForDaemonSet", arg0)
}

func (_m *MockDaemonSetClient) NumberOfDesiredPodsForDaemonSet(_param0 *v1beta1.DaemonSet) (int, error) {
	ret := _m.ctrl.Call(_m, "NumberOfDesiredPodsForDaemonSet", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDaemonSetClientRecorder) NumberOfDesiredPodsForDaemonSet(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "NumberOfDesiredPodsForDaemonSet", arg0)
}

// Mock of PodClient interface
type MockPodClient struct {
	ctrl     *gomock.Controller
	recorder *_MockPodClientRecorder
}

// Recorder for MockPodClient (not exported)
type _MockPodClientRecorder struct {
	mock *MockPodClient
}

func NewMockPodClient(ctrl *gomock.Controller) *MockPodClient {
	mock := &MockPodClient{ctrl: ctrl}
	mock.recorder = &_MockPodClientRecorder{mock}
	return mock
}

func (_m *MockPodClient) EXPECT() *_MockPodClientRecorder {
	return _m.recorder
}

func (_m *MockPodClient) DeletePod(namespace string, name string) error {
	ret := _m.ctrl.Call(_m, "DeletePod", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPodClientRecorder) DeletePod(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePod", arg0, arg1)
}

func (_m *MockPodClient) ListPodsWithSelector(namespace string, selector *unversioned.LabelSelector) (*v1.PodList, error) {
	ret := _m.ctrl.Call(_m, "ListPodsWithSelector", namespace, selector)
	ret0, _ := ret[0].(*v1.PodList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPodClientRecorder) ListPodsWithSelector(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListPodsWithSelector", arg0, arg1)
}

// Mock of DeploymentClient interface
type MockDeploymentClient struct {
	ctrl     *gomock.Controller
	recorder *_MockDeploymentClientRecorder
}

// Recorder for MockDeploymentClient (not exported)
type _MockDeploymentClientRecorder struct {
	mock *MockDeploymentClient
}

func NewMockDeploymentClient(ctrl *gomock.Controller) *MockDeploymentClient {
	mock := &MockDeploymentClient{ctrl: ctrl}
	mock.recorder = &_MockDeploymentClientRecorder{mock}
	return mock
}

func (_m *MockDeploymentClient) EXPECT() *_MockDeploymentClientRecorder {
	return _m.recorder
}

func (_m *MockDeploymentClient) GetDeployment(namespace string, name string) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "GetDeployment", namespace, name)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentClientRecorder) GetDeployment(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeployment", arg0, arg1)
}

func (_m *MockDeploymentClient) CreateDeployment(_param0 *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "CreateDeployment", _param0)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentClientRecorder) CreateDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDeployment", arg0)
}

func (_m *MockDeploymentClient) UpdateDeployment(_param0 *v1beta1.Deployment) (*v1beta1.Deployment, error) {
	ret := _m.ctrl.Call(_m, "UpdateDeployment", _param0)
	ret0, _ := ret[0].(*v1beta1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentClientRecorder) UpdateDeployment(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateDeployment", arg0)
}

func (_m *MockDeploymentClient) DeploymentRollingUpdate(_param0 *v1beta1.Deployment, _param1 UpdateOpts) (bool, error) {
	ret := _m.ctrl.Call(_m, "DeploymentRollingUpdate", _param0, _param1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDeploymentClientRecorder) DeploymentRollingUpdate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeploymentRollingUpdate", arg0, arg1)
}

// Mock of ServiceClient interface
type MockServiceClient struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceClientRecorder
}

// Recorder for MockServiceClient (not exported)
type _MockServiceClientRecorder struct {
	mock *MockServiceClient
}

func NewMockServiceClient(ctrl *gomock.Controller) *MockServiceClient {
	mock := &MockServiceClient{ctrl: ctrl}
	mock.recorder = &_MockServiceClientRecorder{mock}
	return mock
}

func (_m *MockServiceClient) EXPECT() *_MockServiceClientRecorder {
	return _m.recorder
}

func (_m *MockServiceClient) GetService(namespace string, name string) (*v1.Service, error) {
	ret := _m.ctrl.Call(_m, "GetService", namespace, name)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) GetService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetService", arg0, arg1)
}

func (_m *MockServiceClient) UpdateService(_param0 *v1.Service) (*v1.Service, error) {
	ret := _m.ctrl.Call(_m, "UpdateService", _param0)
	ret0, _ := ret[0].(*v1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceClientRecorder) UpdateService(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateService", arg0)
}

// Mock of NodeClient interface
type MockNodeClient struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeClientRecorder
}

// Recorder for MockNodeClient (not exported)
type _MockNodeClientRecorder struct {
	mock *MockNodeClient
}

func NewMockNodeClient(ctrl *gomock.Controller) *MockNodeClient {
	mock := &MockNodeClient{ctrl: ctrl}
	mock.recorder = &_MockNodeClientRecorder{mock}
	return mock
}

func (_m *MockNodeClient) EXPECT() *_MockNodeClientRecorder {
	return _m.recorder
}

func (_m *MockNodeClient) GetNode(name string) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "GetNode", name)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) GetNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNode", arg0)
}

func (_m *MockNodeClient) UpdateNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "UpdateNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) UpdateNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateNode", arg0)
}

func (_m *MockNodeClient) DrainNode(_param0 *v1.Node) error {
	ret := _m.ctrl.Call(_m, "DrainNode", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeClientRecorder) DrainNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DrainNode", arg0)
}

func (_m *MockNodeClient) UnCordonNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "UnCordonNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) UnCordonNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnCordonNode", arg0)
}

func (_m *MockNodeClient) CordonNode(_param0 *v1.Node) (*v1.Node, error) {
	ret := _m.ctrl.Call(_m, "CordonNode", _param0)
	ret0, _ := ret[0].(*v1.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeClientRecorder) CordonNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CordonNode", arg0)
}
