apiVersion: v1
kind: Namespace
metadata:
  name: nginx-hpa
---
apiVersion: rbac.authorization.k8s.io/v1alpha1
kind: ClusterRoleBinding
metadata:
  name: hpa-admin-user
subjects:
  - kind: ServiceAccount
    name: default
    namespace: nginx-hpa
roleRef:
  kind: ClusterRole
  name: admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-hpa
  namespace: nginx-hpa
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: nginx-hpa
        namespace: nginx-hpa
    spec:
      containers:
      - name: nginx-hpa
        image: nginx:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            cpu: 100m
            memory: 100M
---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-hpa
  namespace: nginx-hpa
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: nginx-hpa
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 25
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-hpa
  namespace: nginx-hpa
spec:
  selector:
    name: nginx-hpa
  ports:
  - port: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-hpa-tester
  namespace: nginx-hpa
data:
  tester.sh: |-
    #!/bin/bash

    KUBE_TOKEN=$(</var/run/secrets/kubernetes.io/serviceaccount/token)

    # Install components.
    echo "Installing components"
    apt-get update 2>&1 > /dev/null
    apt-get install -y siege curl jq 2>&1 > /dev/null

    # Start Siege.
    echo "Starting Siege"
    echo "show-logfile = false" > ~/.siegerc
    nohup siege -q -d0 -c150 http://nginx-hpa.nginx-hpa.svc.cluster.local 2> /dev/null &
    SIEGE_PID=$!
    trap "kill -TERM $SIEGE_PID" INT TERM

    # Wait for Scale Up.
    echo "Waiting for scale up ... "
    while true; do
      DESIRED=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/apis/autoscaling/v1/namespaces/nginx-hpa/horizontalpodautoscalers/nginx-hpa | jq '.status.desiredReplicas')
      if [ $DESIRED -gt 1 ]; then
        echo "Waiting for scale up ... OK"
        break
      fi
      sleep 1
    done

    # Kill Siege.
    echo "Stopping Siege"
    kill -TERM $SIEGE_PID

    # Wait for Scale Down.
    echo "Waiting for scale down ... "
    while true; do
      DESIRED=$(curl -sSk -H "Authorization: Bearer $KUBE_TOKEN" https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT/apis/autoscaling/v1/namespaces/nginx-hpa/horizontalpodautoscalers/nginx-hpa | jq '.status.desiredReplicas')
      if [ $DESIRED -eq 1 ]; then
        echo "Waiting for scale down ... OK"
        break
      fi
      sleep 1
    done

    echo "Success"
    exit 0
---
apiVersion: v1
kind: Pod
metadata:
  name: nginx-hpa-tester
  namespace: nginx-hpa
spec:
  restartPolicy: OnFailure
  containers:
  - name: nginx-hpa-tester
    image: debian:latest
    command: ["bash", "/configmaps/tester.sh"]
    volumeMounts:
    - name: nginx-hpa-tester
      mountPath: /configmaps/
  volumes:
  - name: nginx-hpa-tester
    configMap:
      name: nginx-hpa-tester
