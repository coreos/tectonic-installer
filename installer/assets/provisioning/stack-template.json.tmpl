{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Tectonic cluster {{.ClusterName}}",
  "Resources": {
    {{- if not .ExternalETCDClient}}
    {{range $index, $instance := .ETCDInstances}}
    {{with $instanceLogicalName := printf "ETCDInstance%d" $index}}
    {{with $domainLogicalName := printf "ETCDDomain%d" $index}}
    "{{$domainLogicalName}}": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "{{$.HostedZoneID}}",
        "Name": "{{$instance.DomainName}}",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          { "Fn::GetAtt" : [ "{{$instanceLogicalName}}", "PrivateIp" ] }
        ]
      }
    },
    "{{$instanceLogicalName}}": {
      "Properties": {
        "AvailabilityZone": "{{$instance.Subnet.AvailabilityZone}}",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{$.ETCDRootVolumeSize}}",
              {{if gt $.ETCDRootVolumeIOPS 0}}
              "Iops": "{{$.ETCDRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{$.ETCDRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileController"
        },
        "ImageId": "{{$.AMI}}",
        "InstanceType": "{{$.ETCDInstanceType}}",
        "KeyName": "{{$.KeyName}}",
        "Monitoring": true,
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": false,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [
              {
                "Ref": "SecurityGroupETCD"
              }
            ],
            "SubnetId":
            {{if not $instance.Subnet.ID}}
            {
              "Ref": "{{$instance.Subnet.Name}}"
            }
            {{else}}
            "{{$instance.Subnet.ID}}"
            {{end}}
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          },
          {
            "Key": "EtcdName",
            "Value": "{{$instance.Name}}"
          }
          {{- range $tag := $.Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "UserData": "{{ $.UserDataEtcd }}"
      },
      "Type": "AWS::EC2::Instance"
    },
    {{end}}
    {{end}}
    {{end}}
    "SecurityGroupETCD": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupIngressControllerToEtcdClient": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressWorkerToEtcdClient": {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressControllerToEtcdPeer": {
      "Properties": {
        "FromPort": 2380,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 2380
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressWorkerToEtcdPeer": {
      "Properties": {
        "FromPort": 2380,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 2380
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressSSHFromControllerToEtcd": {
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 22
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressEtcdToEtcdPeer":
     {
      "Properties": {
        "FromPort": 2380,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "ToPort": 2380
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupIngressEtcdToEtcdClient":
     {
      "Properties": {
        "FromPort": 2379,
        "GroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupETCD"
        },
        "ToPort": 2379
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    {{- end}}
    "ControllerDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "{{.HostedZoneID}}",
        "Name": "{{.ControllerDomain}}",
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": {
             "Fn::GetAtt": ["KubernetesLoadBalancer", "CanonicalHostedZoneNameID"]
          },
          "DNSName": {
            "Fn::GetAtt": ["KubernetesLoadBalancer", "DNSName"]
          }
        }
      }
    },
    "KubernetesLoadBalancer": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          {{if eq .ELBScheme "internet-facing"}}
          "Subnets": [
            {{range $index, $subnet := .ControllerSubnets}}
            {{if gt $index 0}},{{end}}
            {{if not $subnet.ID}}
            {
              "Ref": "{{$subnet.Name}}"
            }
            {{else}}
            "{{$subnet.ID}}"
            {{end}}
            {{end}}
          ],
          {{else}}
          "Subnets": [
            {{range $index, $subnet := .WorkerSubnets}}
            {{if gt $index 0}},{{end}}
            {{if not $subnet.ID}}
            {
              "Ref": "{{$subnet.Name}}"
            }
            {{else}}
            "{{$subnet.ID}}"
            {{end}}
            {{end}}
          ],
          {{end}}
          "Listeners" : [
            {
            "LoadBalancerPort" : "22",
            "InstancePort" : "22",
            "Protocol" : "TCP"
            },
            {
            "LoadBalancerPort" : "443",
            "InstancePort" : "443",
            "Protocol" : "TCP"
            },
            {
            "LoadBalancerPort" : "10255",
            "InstancePort" : "10255",
            "Protocol" : "TCP"
            }
          ],
          "LoadBalancerName": "{{.ClusterName}}-k8s",
          "HealthCheck" : {
              "Target" : "HTTP:10255/healthz",
              "HealthyThreshold" : "2",
              "UnhealthyThreshold" : "2",
              "Interval" : "5",
              "Timeout" : "3"
          },
          "Scheme": "{{.ELBScheme}}",
          "SecurityGroups": [
            { "Ref" : "SecurityGroupController" }
          ],
          "Tags": [
            {
              "Key": "KubernetesCluster",
              "Value": "{{.ClusterName}}"
            }
            {{- range $tag := .Tags}},
            {
              "Key": "{{$tag.Key}}",
              "Value": "{{$tag.Value}}"
            }
            {{- end}}
          ]
        }
        {{if not .VPCID}},
        "DependsOn" : "VPCGatewayAttachment"
        {{end}}
    },
    "TectonicDomain": {
      "Type": "AWS::Route53::RecordSet",
      "Properties": {
        "HostedZoneId": "{{.HostedZoneID}}",
        "Name": "{{.TectonicDomain}}",
        "Type": "A",
        "AliasTarget": {
          "HostedZoneId": {
             "Fn::GetAtt": ["TectonicLoadBalancer", "CanonicalHostedZoneNameID"]
          },
          "DNSName": {
            "Fn::GetAtt": ["TectonicLoadBalancer", "DNSName"]
          }
        }
      }
    },
    "TectonicLoadBalancer": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          {{if eq .ELBScheme "internet-facing"}}
          "Subnets": [
            {{range $index, $subnet := .ControllerSubnets}}
            {{if gt $index 0}},{{end}}
            {{if not $subnet.ID}}
            {
              "Ref": "{{$subnet.Name}}"
            }
            {{else}}
            "{{$subnet.ID}}"
            {{end}}
            {{end}}
          ],
          {{else}}
          "Subnets": [
            {{range $index, $subnet := .WorkerSubnets}}
            {{if gt $index 0}},{{end}}
            {{if not $subnet.ID}}
            {
              "Ref": "{{$subnet.Name}}"
            }
            {{else}}
            "{{$subnet.ID}}"
            {{end}}
            {{end}}
          ],
          {{end}}
          "Listeners" : [
            {
            "LoadBalancerPort" : "80",
            "InstancePort" : "32001",
            "Protocol" : "TCP"
            },
            {
            "LoadBalancerPort" : "443",
            "InstancePort" : "32000",
            "Protocol" : "TCP"
            }
          ],
          "LoadBalancerName": "{{.ClusterName}}-tec",
          "HealthCheck" : {
              "Target" : "HTTP:32002/healthz",
              "HealthyThreshold" : "2",
              "UnhealthyThreshold" : "2",
              "Interval" : "5",
              "Timeout" : "3"
          },
          "Scheme": "{{.ELBScheme}}",
          "SecurityGroups": [
            { "Ref" : "SecurityGroupController" }
          ],
          "Tags": [
            {
              "Key": "KubernetesCluster",
              "Value": "{{.ClusterName}}"
            }
            {{- range $tag := .Tags}},
            {
              "Key": "{{$tag.Key}}",
              "Value": "{{$tag.Value}}"
            }
            {{- end}}
          ]
        }
        {{if not .VPCID}},
        "DependsOn" : "VPCGatewayAttachment"
        {{end}}
    },
    "IAMInstanceProfileController": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleController"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMInstanceProfileWorker": {
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "IAMRoleWorker"
          }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "IAMRoleController": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {
                  "Action" : [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:s3:::*"
                },
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "IAMRoleWorker": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action": "elasticloadbalancing:*",
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Action" : "kms:Decrypt",
                  "Effect" : "Allow",
                  "Resource" : "{{.KMSKeyARN}}"
                },
                {
                  "Action": [
                    "ecr:GetAuthorizationToken",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetRepositoryPolicy",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:BatchGetImage"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "root"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "AutoScaleController": {
      "Properties": {
        {{if eq .ELBScheme "internet-facing"}}
        "AvailabilityZones": [
          {{range $index, $subnet := .ControllerSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        {{else}}
        "AvailabilityZones": [
          {{range $index, $subnet := .WorkerSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        {{end}}
        "DesiredCapacity": "{{.ControllerCount}}",
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationController"
        },
        "LoadBalancerNames": [
          { "Ref" : "KubernetesLoadBalancer" },
          { "Ref" : "TectonicLoadBalancer" }
        ],
        "MaxSize": "{{.ControllerCount}}",
        "MinSize": "{{.ControllerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "PropagateAtLaunch": "true",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VPCZoneIdentifier": [
          {{if eq .ELBScheme "internet-facing"}}
          {{range $index, $subnet := .ControllerSubnets}}
          {{if gt $index 0}},{{end}}
          {{if not $subnet.ID}}
          {
            "Ref": "{{$subnet.Name}}"
          }
          {{else}}
          "{{$subnet.ID}}"
          {{end}}
          {{end}}
          {{else}}
          {{range $index, $subnet := .WorkerSubnets}}
          {{if gt $index 0}},{{end}}
          {{if not $subnet.ID}}
          {
            "Ref": "{{$subnet.Name}}"
          }
          {{else}}
          "{{$subnet.ID}}"
          {{end}}
          {{end}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService": "{{.ControllerCount}}",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M"
        }
      }
    },
    "LaunchConfigurationController": {
      "Properties": {
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.ControllerRootVolumeSize}}",
              {{if gt .ControllerRootVolumeIOPS 0}}
              "Iops": "{{.ControllerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.ControllerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileController"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.ControllerInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupController"
          }
        ],
        "UserData": "{{ .UserDataController }}"
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "AutoScaleWorker": {
      "Properties": {
        "AvailabilityZones": [
          {{range $index, $subnet := .WorkerSubnets}}
          {{if gt $index 0}},{{end}}
          "{{$subnet.AvailabilityZone}}"
          {{end}}
        ],
        "DesiredCapacity": "{{.WorkerCount}}",
        "HealthCheckGracePeriod": 600,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": {
          "Ref": "LaunchConfigurationWorker"
        },
        "MaxSize": "{{.WorkerCount}}",
        "MinSize": "{{.WorkerCount}}",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "PropagateAtLaunch": "true",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "PropagateAtLaunch": "true",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VPCZoneIdentifier": [
          {{range $index, $subnet := .WorkerSubnets}}
          {{if gt $index 0}},{{end}}
          {{if not $subnet.ID}}
          {
            "Ref": "{{$subnet.Name}}"
          }
          {{else}}
          "{{$subnet.ID}}"
          {{end}}
          {{end}}
        ]
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "{{.WorkerCount}}",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M"
        }
      }
    },
    "LaunchConfigurationWorker": {
      "Properties": {
        "AssociatePublicIpAddress": false,
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": "{{.WorkerRootVolumeSize}}",
              {{if gt .WorkerRootVolumeIOPS 0}}
              "Iops": "{{.WorkerRootVolumeIOPS}}",
              {{end}}
              "VolumeType": "{{.WorkerRootVolumeType}}"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "IAMInstanceProfileWorker"
        },
        "ImageId": "{{.AMI}}",
        "InstanceType": "{{.WorkerInstanceType}}",
        "KeyName": "{{.KeyName}}",
        "SecurityGroups": [
          {
            "Ref": "SecurityGroupWorker"
          }
        ],
        "UserData": "{{ .UserDataWorker }}"
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "SecurityGroupController": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 22,
            "IpProtocol": "tcp",
            "ToPort": 22
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 10255,
            "IpProtocol": "tcp",
            "ToPort": 10255
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 32000,
            "IpProtocol": "tcp",
            "ToPort": 32000
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 32001,
            "IpProtocol": "tcp",
            "ToPort": 32001
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 32002,
            "IpProtocol": "tcp",
            "ToPort": 32002
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupWorker": {
      "Properties": {
        "GroupDescription": {
          "Ref": "AWS::StackName"
        },
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "tcp",
            "ToPort": 65535
          },
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": 0,
            "IpProtocol": "udp",
            "ToPort": 65535
          }
        ],
        "SecurityGroupIngress": [
          {
            "CidrIp": "0.0.0.0/0",
            "FromPort": -1,
            "IpProtocol": "icmp",
            "ToPort": -1
          }
        ],
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "SecurityGroupWorkerIngressFromControllerToWorkerSSH": {
      "Properties": {
        "FromPort": 22,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 22
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromFlannelToController": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToKubelet": {
      "Properties": {
        "FromPort": 10250,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 10250
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerTocAdvisor": {
      "Properties": {
        "FromPort": 4194,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 4194
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToFlannel": {
      "Properties": {
        "FromPort": 8472,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "udp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 8472
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToWorkerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerKubeletReadOnly": {
      "Properties": {
        "FromPort": 10255,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 10255
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToControllerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromControllerToWorkerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupController"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToControllerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupController"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "SecurityGroupWorkerIngressFromWorkerToWorkerNodeExporter": {
      "Properties": {
        "FromPort": 9100,
        "GroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Ref": "SecurityGroupWorker"
        },
        "ToPort": 9100
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    }
    {{if eq .ELBScheme "internet-facing"}}
    {{range $index, $subnet := .ControllerSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.Name}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
          {{- range $tag := $.Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    }
    {{end}}
    {{end}}
    {{else if not (index .ControllerSubnets 0).ID}}
    ,
    "{{(index .ControllerSubnets 0).Name}}": {
      "Properties": {
        "AvailabilityZone": "{{(index .ControllerSubnets 0).AvailabilityZone}}",
        "CidrBlock": "{{(index .ControllerSubnets 0).InstanceCIDR}}",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
          {{- range $tag := $.Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    }
    {{end}}
    {{range $index, $subnet := .WorkerSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.Name}}": {
      "Properties": {
        "AvailabilityZone": "{{$subnet.AvailabilityZone}}",
        "CidrBlock": "{{$subnet.InstanceCIDR}}",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{$.ClusterName}}"
          }
          {{- range $tag := $.Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{$.VPCRef}}
      },
      "Type": "AWS::EC2::Subnet"
    }
    {{end}}
    {{end}}
    {{if not .VPCID}}
    ,
    "{{.VPCLogicalName}}": {
      "Properties": {
        "CidrBlock": "{{.VPCCIDR}}",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ]
      },
      "Type": "AWS::EC2::VPC"
    },
    "{{.InternetGatewayLogicalName}}": {
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "VPCGatewayAttachment": {
      "Properties": {
        "InternetGatewayId": {{.InternetGatewayRef}},
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    }
    {{else}}
    {{if .RouteTableID}}
    {{range $index, $subnet := .WorkerSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.Name}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": "{{$.RouteTableID}}",
        "SubnetId": {
          "Ref": "{{$subnet.Name}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{end}}
    {{end}}
    {{if .CreateControllerSubnets}}
    ,
    "RouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "RouteToInternet": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {{.InternetGatewayRef}},
        "RouteTableId": { "Ref" : "RouteTable" }
      },
      "Type": "AWS::EC2::Route"
    }
    {{if eq .ELBScheme "internet-facing"}}
    {{range $index, $subnet := .ControllerSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.Name}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": { "Ref" : "RouteTable"},
        "SubnetId": {
          "Ref": "{{$subnet.Name}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{else if not (index .ControllerSubnets 0).ID}}
    ,
    "{{(index .ControllerSubnets 0).Name}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": { "Ref" : "RouteTable"},
        "SubnetId": {
          "Ref": "{{(index .ControllerSubnets 0).Name}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{if .CreateWorkerSubnets}}
    ,
    "NATAddress" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },
    "NATGateway" : {
      "Type" : "AWS::EC2::NatGateway",
      {{if not .VPCID}}
      "DependsOn" : "VPCGatewayAttachment",
      {{end}}
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : ["NATAddress", "AllocationId"]},
        "SubnetId" :
        {{if not (index .ControllerSubnets 0).ID}}
        {
          "Ref": "{{(index .ControllerSubnets 0).Name}}"
        }
        {{else}}
        "{{(index .ControllerSubnets 0).ID}}"
        {{end}}
      }
    },
    "InternalRouteTable": {
      "Properties": {
        "Tags": [
          {
            "Key": "KubernetesCluster",
            "Value": "{{.ClusterName}}"
          }
          {{- range $tag := .Tags}},
          {
            "Key": "{{$tag.Key}}",
            "Value": "{{$tag.Value}}"
          }
          {{- end}}
        ],
        "VpcId": {{.VPCRef}}
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "Route" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "InternalRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGateway" }
      }
    }
    {{range $index, $subnet := .WorkerSubnets}}
    {{if not $subnet.ID}}
    ,
    "{{$subnet.Name}}RouteTableAssociation": {
      "Properties": {
        "RouteTableId": { "Ref" : "InternalRouteTable"},
        "SubnetId": {
          "Ref": "{{$subnet.Name}}"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    }
    {{end}}
    {{end}}
    {{end}}
  }
}
