---
systemd:
  units:
    - name: etcd-member.service
      enable: true
      dropins:
        - name: 40-etcd-gateway.conf
          contents: |
            [Service]
            Environment="ETCD_IMAGE_TAG=v3.1.2"
            ExecStart=
            ExecStart=/usr/lib/coreos/etcd-wrapper gateway start \
                --listen-addr=127.0.0.1:2379 \
                --endpoints={{.ETCDEndpoints}}
    - name: docker.service
      enable: true
    - name: locksmithd.service
      dropins:
        - name: 40-etcd-lock.conf
          contents: |
            [Service]
            Environment="REBOOT_STRATEGY=etcd-lock"
    - name: wait-for-dns.service
      enable: true
      contents: |
        [Unit]
        Description=Wait for DNS entries
        Wants=systemd-resolved.service
        Before=kubelet.service
        [Service]
        Type=oneshot
        RemainAfterExit=true
        ExecStart=/bin/sh -c 'while ! /usr/bin/grep '^[^#[:space:]]' /etc/resolv.conf > /dev/null; do sleep 1; done'
        [Install]
        RequiredBy=kubelet.service
    - name: kubelet.service
      enable: true
      contents: |
        [Unit]
        Description=Kubelet via Hyperkube ACI
        [Service]
        Environment="RKT_OPTS=--uuid-file-save=/var/run/kubelet-pod.uuid \
          --dns=host \
          --volume=resolv,kind=host,source=/etc/resolv.conf \
          --mount volume=resolv,target=/etc/resolv.conf \
          --volume var-lib-cni,kind=host,source=/var/lib/cni \
          --mount volume=var-lib-cni,target=/var/lib/cni \
          --volume var-log,kind=host,source=/var/log \
          --mount volume=var-log,target=/var/log"
        EnvironmentFile=/etc/kubernetes/kubelet.env
        ExecStartPre=/opt/bin/decrypt-tls-assets
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /srv/kubernetes/manifests
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/checkpoint-secrets
        ExecStartPre=/bin/mkdir -p /etc/kubernetes/cni/net.d
        ExecStartPre=/bin/mkdir -p /var/lib/cni
        ExecStartPre=-/usr/bin/rkt rm --uuid-file=/var/run/kubelet-pod.uuid
        ExecStart=/usr/lib/coreos/kubelet-wrapper \
          --kubeconfig=/etc/kubernetes/kubeconfig \
          --require-kubeconfig \
          --client-ca-file=/etc/kubernetes/ssl/ca.pem \
          --anonymous-auth=false \
          --cni-conf-dir=/etc/kubernetes/cni/net.d \
          --network-plugin=cni \
          --lock-file=/var/run/lock/kubelet.lock \
          --exit-on-lock-contention \
          --pod-manifest-path=/etc/kubernetes/manifests \
          --allow-privileged \
          --node-labels=master=true \
          --minimum-container-ttl-duration=6m0s \
          --cluster_dns={{.DNSServiceIP}} \
          --cluster_domain=cluster.local \
          --cloud-provider=aws
        ExecStop=-/usr/bin/rkt stop --uuid-file=/var/run/kubelet-pod.uuid
        Restart=always
        RestartSec=10
        [Install]
        WantedBy=multi-user.target
    - name: bootkube.service
      contents: |
        [Unit]
        Description=Bootstrap a Kubernetes control plane with a temp api-server
        [Service]
        Type=simple
        WorkingDirectory=/opt/bootkube
        ExecStartPre=/opt/bin/get-s3-assets
        ExecStart=/opt/bootkube/assets/bootkube-start
storage:
  files:
    - path: /opt/bootkube/.empty
      filesystem: root
      mode: 0644
    - path: /etc/kubernetes/kubelet.env
      filesystem: root
      mode: 0644
      contents:
        inline: |
          KUBELET_ACI=quay.io/coreos/hyperkube
          KUBELET_VERSION=v1.5.6_coreos.0
    - path: /opt/bin/decrypt-tls-assets
      filesystem: root
      mode: 0700
      contents:
        inline: |
          #!/bin/bash -e
          for encKey in $(find /etc/kubernetes/ssl/*.pem.enc);do
            cat $encKey | base64 --decode -w0 | gzip -d > $encKey.raw
            rkt run \
            --volume=ssl,kind=host,source=/etc/kubernetes/ssl,readOnly=false \
            --mount=volume=ssl,target=/etc/kubernetes/ssl \
            --uuid-file-save=/var/run/coreos/decrypt-tls-assets.uuid \
            --dns=host \
            --net=host \
            --trust-keys-from-https \
            quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 --exec=/bin/bash -- \
              -c \
              "/usr/bin/aws \
                --region {{.Region}} kms decrypt \
                --ciphertext-blob fileb://$encKey.raw \
                --output text \
                --query Plaintext \
                > $encKey.b64"

            base64 --decode < $encKey.b64 > ${encKey%.enc}
            rkt rm --uuid-file=/var/run/coreos/decrypt-tls-assets.uuid
          done
    - path: /opt/bin/get-s3-assets
      filesystem: root
      mode: 0700
      contents:
        inline: |
          #!/bin/bash
          # From https://gist.github.com/davidejones/d05f51df75e659111227
          instance_profile=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/`
          aws_access_key_id=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${instance_profile} | grep AccessKeyId | cut -d':' -f2 | sed 's/[^0-9A-Z]*//g'`
          aws_secret_access_key=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${instance_profile} | grep SecretAccessKey | cut -d':' -f2 | sed 's/[^0-9A-Za-z/+=]*//g'`
          token=`curl -s http://169.254.169.254/latest/meta-data/iam/security-credentials/${instance_profile} | sed -n '/Token/{p;}' | cut -f4 -d'"'`
          rkt run \
            --net=host \
            --dns=host \
            --trust-keys-from-https quay.io/coreos/awscli:025a357f05242fdad6a81e8a6b520098aa65a600 \
            --volume=bootkube,kind=host,source=/opt/bootkube \
            --mount=volume=bootkube,target=/out \
            --set-env=AWS_ACCESS_KEY_ID=${aws_access_key_id} \
            --set-env=AWS_SECRET_ACCESS_KEY=${aws_secret_access_key} \
            --set-env=AWS_SESSION_TOKEN=${token} \
            --exec=/usr/bin/aws -- --region={{.Region}} s3 cp s3://{{.AssetsS3Bucket}}/{{.AssetsS3File}} /out/assets.zip
          cd /opt/bootkube
          unzip -o assets.zip
          if [ $? -gt 1 ]; then exit 1; fi
          chmod +x /opt/bootkube/assets/bootkube-start
    - path: /etc/kubernetes/ssl/ca.pem.enc
      filesystem: root
      contents:
        inline: |
          {{.EncodedSecrets.CACert}}
    - path: /etc/kubernetes/ssl/client.pem.enc
      filesystem: root
      contents:
        inline: |
          {{.EncodedSecrets.ClientCert}}
    - path: /etc/kubernetes/ssl/client-key.pem.enc
      filesystem: root
      contents:
        inline: |
          {{.EncodedSecrets.ClientKey}}
    - path: /etc/kubernetes/kubeconfig
      filesystem: root
      mode: 0644
      contents:
        inline: |
          apiVersion: v1
          kind: Config
          clusters:
          - name: local
            cluster:
              server: {{.SecureAPIServers}}
              certificate-authority: /etc/kubernetes/ssl/ca.pem
          users:
          - name: kubelet
            user:
              client-certificate: /etc/kubernetes/ssl/client.pem
              client-key: /etc/kubernetes/ssl/client-key.pem
          contexts:
          - context:
              cluster: local
              user: kubelet
    - path: /etc/sysctl.d/max-user-watches.conf
      filesystem: root
      contents:
        inline: |
          fs.inotify.max_user_watches=16184
